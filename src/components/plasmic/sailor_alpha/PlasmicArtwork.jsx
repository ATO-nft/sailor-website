// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6tP4H2YXq73abyMEePhpsf
// Component: YFLbf8Sj1U
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: 9HJOL_ndHV/component
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import { useScreenVariants as useScreenVariantsu0VQjvxy5SkDm } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: U0vQjvxy5SKDm/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_sailor_alpha.module.css"; // plasmic-import: 6tP4H2YXq73abyMEePhpsf/projectcss
import sty from "./PlasmicArtwork.module.css"; // plasmic-import: YFLbf8Sj1U/css
import prevNavpngLzTakKt2X from "./images/prevNavpng.png"; // plasmic-import: LzTakKt2X/picture
import nextNavpngGGzJCt2Ys from "./images/nextNavpng.png"; // plasmic-import: GGzJCt2Ys/picture
import titre1PngHD0J16Vls from "./images/titre1Png.png"; // plasmic-import: hD0j16vls/picture

export const PlasmicArtwork__VariantProps = new Array();

export const PlasmicArtwork__ArgProps = new Array();

function PlasmicArtwork__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsu0VQjvxy5SkDm()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
            light={true}
          />

          <div className={classNames(projectcss.all, sty.freeBox___3SVom)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__pOlS1)}>
                <div className={classNames(projectcss.all, sty.freeBox__y805G)}>
                  <Slider
                    data-plasmic-name={"slider"}
                    data-plasmic-override={overrides.slider}
                    accessibility={false}
                    adaptiveHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : false
                    }
                    arrows={false}
                    autoplay={false}
                    autoplaySpeed={2500}
                    centerMode={false}
                    centerPadding={""}
                    className={classNames("__wab_instance", sty.slider)}
                    dots={false}
                    pauseOnHover={false}
                    slidesPerRow={1}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ajaM2)}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___44LIi
                      )}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__mvefR)}
                    />
                  </Slider>

                  <div
                    data-plasmic-name={"sliderNavBar"}
                    data-plasmic-override={overrides.sliderNavBar}
                    className={classNames(projectcss.all, sty.sliderNavBar)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__auxcC)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      id={"prev-nav"}
                      loading={"lazy"}
                      src={{
                        src: prevNavpngLzTakKt2X,
                        fullWidth: 64,
                        fullHeight: 45,
                        aspectRatio: undefined
                      }}
                    />

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__pgDte)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      id={"next-nav"}
                      loading={"lazy"}
                      src={{
                        src: nextNavpngGGzJCt2Ys,
                        fullWidth: 64,
                        fullHeight: 45,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___1TSrX)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__eIpfC)}
                    displayHeight={"113px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "80%"
                        : "57.45%"
                    }
                    loading={"lazy"}
                    src={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? {
                            src: titre1PngHD0J16Vls,
                            fullWidth: 431,
                            fullHeight: 294,
                            aspectRatio: undefined
                          }
                        : {
                            src: titre1PngHD0J16Vls,
                            fullWidth: 431,
                            fullHeight: 294,
                            aspectRatio: undefined
                          }
                    }
                  />

                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {
                      '"2020. The world has come to a halt by sinking into a global health crisis dictatorship.\nSailor is a lonely sailor traveling the world. He is looking for wild, quiet places where he can escape into the wilds of his imagination and indulge in poetry. As he flees "Babylone", the heart of humanity 2.0, he collects odd jobs in order to save money and get a boat worthy of competing in his great escape. But only God knows what his journey will bring..."'
                    }
                  </div>
                </p.Stack>
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "header", "slider", "sliderNavBar", "text"],
  header: ["header"],
  slider: ["slider"],
  sliderNavBar: ["sliderNavBar"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicArtwork__ArgProps,
          internalVariantPropNames: PlasmicArtwork__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicArtwork__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArtwork";
  } else {
    func.displayName = `PlasmicArtwork.${nodeName}`;
  }
  return func;
}

export const PlasmicArtwork = Object.assign(
  // Top-level PlasmicArtwork renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    slider: makeNodeComponent("slider"),
    sliderNavBar: makeNodeComponent("sliderNavBar"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicArtwork
    internalVariantProps: PlasmicArtwork__VariantProps,
    internalArgProps: PlasmicArtwork__ArgProps
  }
);

export default PlasmicArtwork;
/* prettier-ignore-end */
