// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6tP4H2YXq73abyMEePhpsf
// Component: 9ykw7nb6Sf
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: 9HJOL_ndHV/component
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import Footer from "../../Footer"; // plasmic-import: w_pxODdXjgL/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_sailor_alpha.module.css"; // plasmic-import: 6tP4H2YXq73abyMEePhpsf/projectcss
import sty from "./PlasmicVision2.module.css"; // plasmic-import: 9ykw7nb6Sf/css

export const PlasmicVision2__VariantProps = new Array();

export const PlasmicVision2__ArgProps = new Array();

export const defaultVision2__Args = {};

function PlasmicVision2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultVision2__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
            light={true}
          />

          <div
            data-plasmic-name={"sliderSection"}
            data-plasmic-override={overrides.sliderSection}
            className={classNames(projectcss.all, sty.sliderSection)}
          >
            <div
              data-plasmic-name={"sliderContainer"}
              data-plasmic-override={overrides.sliderContainer}
              className={classNames(projectcss.all, sty.sliderContainer)}
            >
              <Slider
                data-plasmic-name={"slider"}
                data-plasmic-override={overrides.slider}
                arrows={false}
                className={classNames("__wab_instance", sty.slider)}
                dots={true}
              >
                {true ? (
                  <div
                    data-plasmic-name={"slide1"}
                    data-plasmic-override={overrides.slide1}
                    className={classNames(projectcss.all, sty.slide1)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__owwJq
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__f1IMe
                          )}
                        >
                          {"Immersion in the Sailor's world"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hItNx
                          )}
                        >
                          {
                            'Sailor invites whoever is ready to learn about the world, to dive into his creative universe and to share his vision. \n\nHe will offer to discover him under all these aspects with the operation "Hut", which will be a unique journey, mixing the real and the virtual.'
                          }
                        </div>
                      </p.Stack>
                    ) : null}
                  </div>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"slide2"}
                    data-plasmic-override={overrides.slide2}
                    className={classNames(projectcss.all, sty.slide2)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zaWqc
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5GZuq
                          )}
                        >
                          {"Empowering & mentoring artist"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__orlVw
                          )}
                        >
                          {
                            'Sailor invites whoever is ready to learn about the world, to dive into his creative universe and to share his vision. He will offer to discover him under all these aspects with the operation "Hut", which will be a unique journey, mixing the real and the virtual.'
                          }
                        </div>
                      </p.Stack>
                    ) : null}
                  </div>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"slide3"}
                    data-plasmic-override={overrides.slide3}
                    className={classNames(projectcss.all, sty.slide3)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cF00B
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7GjMw
                          )}
                        >
                          {"Imagine the tomorrow's Sailor"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gHvwk
                          )}
                        >
                          {
                            "Sailor wants to belong to the community, that's why he wanted to surrender himself \nin the web3. \n\nThe community will decide together via a DAO the future of Sailor's story."
                          }
                        </div>
                      </p.Stack>
                    ) : null}
                  </div>
                ) : null}
              </Slider>
            </div>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "sliderSection",
    "sliderContainer",
    "slider",
    "slide1",
    "slide2",
    "slide3",
    "footer"
  ],

  header: ["header"],
  sliderSection: [
    "sliderSection",
    "sliderContainer",
    "slider",
    "slide1",
    "slide2",
    "slide3"
  ],

  sliderContainer: ["sliderContainer", "slider", "slide1", "slide2", "slide3"],
  slider: ["slider", "slide1", "slide2", "slide3"],
  slide1: ["slide1"],
  slide2: ["slide2"],
  slide3: ["slide3"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicVision2__ArgProps,
      internalVariantPropNames: PlasmicVision2__VariantProps
    });

    return PlasmicVision2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVision2";
  } else {
    func.displayName = `PlasmicVision2.${nodeName}`;
  }
  return func;
}

export const PlasmicVision2 = Object.assign(
  // Top-level PlasmicVision2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sliderSection: makeNodeComponent("sliderSection"),
    sliderContainer: makeNodeComponent("sliderContainer"),
    slider: makeNodeComponent("slider"),
    slide1: makeNodeComponent("slide1"),
    slide2: makeNodeComponent("slide2"),
    slide3: makeNodeComponent("slide3"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicVision2
    internalVariantProps: PlasmicVision2__VariantProps,
    internalArgProps: PlasmicVision2__ArgProps
  }
);

export default PlasmicVision2;
/* prettier-ignore-end */
