// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6tP4H2YXq73abyMEePhpsf
// Component: opTqQ96dfN
import * as React from "react";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: 9HJOL_ndHV/component
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import Footer from "../../Footer"; // plasmic-import: w_pxODdXjgL/component
import { useScreenVariants as useScreenVariantsu0VQjvxy5SkDm } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: U0vQjvxy5SKDm/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_sailor_alpha.module.css"; // plasmic-import: 6tP4H2YXq73abyMEePhpsf/projectcss
import sty from "./PlasmicVision.module.css"; // plasmic-import: opTqQ96dfN/css

export const PlasmicVision__VariantProps = new Array();

export const PlasmicVision__ArgProps = new Array();

export const defaultVision__Args = {};

function PlasmicVision__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultVision__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsu0VQjvxy5SkDm()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__qQwM6)}>
            <Slider
              data-plasmic-name={"slider"}
              data-plasmic-override={overrides.slider}
              autoplay={true}
              autoplaySpeed={1500}
              className={classNames("__wab_instance", sty.slider)}
              dots={true}
            >
              {true ? (
                <div
                  data-plasmic-name={"slide1"}
                  data-plasmic-override={overrides.slide1}
                  className={classNames(projectcss.all, sty.slide1)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox___4ISf)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ugwGx
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ac8Pe
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__abkqx
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "Immersion in the Sailor's world"
                                : "Immersion in the Sailor's world"}
                            </div>
                          </div>

                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vcLoX
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lB5Bt
                                )}
                              >
                                {
                                  'Sailor invites whoever is ready to learn about the world, to dive into his creative universe and to share his vision. \n\nHe will offer to discover him under all these aspects with the operation "Hut", which will be a unique journey, mixing the real and the virtual.'
                                }
                              </div>
                            </div>
                          ) : null}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}
              {true ? (
                <div
                  data-plasmic-name={"slide2"}
                  data-plasmic-override={overrides.slide2}
                  className={classNames(projectcss.all, sty.slide2)}
                >
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5DeFd
                      )}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___2MxAi
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__nkRQo
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vx7ED
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "Immersion in the Sailor's world"
                                : "Empowering & mentoring artist"}
                            </div>
                          </div>

                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__tdYdh
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__tgSpm
                                )}
                              >
                                {
                                  'We want to allow artists to express \nand value their creative spirit. \n\nThroughout our journey, we will highlight artists belonging to the Sailor community through the mysterious "Babylon" operation, creative contests, conferences, meetings, etc. \n\n... Everyone will have a chance to become a famous artist!'
                                }
                              </div>
                            </div>
                          ) : null}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}
              {true ? (
                <div
                  data-plasmic-name={"slide3"}
                  data-plasmic-override={overrides.slide3}
                  className={classNames(projectcss.all, sty.slide3)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bibg9)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cTvDm
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qUblf
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__iJnHz
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "Immersion in the Sailor's world"
                                : "Imagine the tomorrow's Sailor"}
                            </div>
                          </div>

                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oco7H
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__drsJ4
                                )}
                              >
                                {
                                  "Sailor wants to belong to the community, that's why he wanted to surrender himself \nin the web3. \n\nThe community will decide together via a DAO the future of Sailor's story."
                                }
                              </div>
                            </div>
                          ) : null}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}
            </Slider>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "header", "slider", "slide1", "slide2", "slide3", "footer"],
  header: ["header"],
  slider: ["slider", "slide1", "slide2", "slide3"],
  slide1: ["slide1"],
  slide2: ["slide2"],
  slide3: ["slide3"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicVision__ArgProps,
      internalVariantPropNames: PlasmicVision__VariantProps
    });

    return PlasmicVision__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVision";
  } else {
    func.displayName = `PlasmicVision.${nodeName}`;
  }
  return func;
}

export const PlasmicVision = Object.assign(
  // Top-level PlasmicVision renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    slider: makeNodeComponent("slider"),
    slide1: makeNodeComponent("slide1"),
    slide2: makeNodeComponent("slide2"),
    slide3: makeNodeComponent("slide3"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicVision
    internalVariantProps: PlasmicVision__VariantProps,
    internalArgProps: PlasmicVision__ArgProps
  }
);

export default PlasmicVision;
/* prettier-ignore-end */
