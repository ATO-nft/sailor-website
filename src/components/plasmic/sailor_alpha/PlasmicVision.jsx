// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6tP4H2YXq73abyMEePhpsf
// Component: opTqQ96dfN
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: 9HJOL_ndHV/component
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import { useScreenVariants as useScreenVariantsu0VQjvxy5SkDm } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: U0vQjvxy5SKDm/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_sailor_alpha.module.css"; // plasmic-import: 6tP4H2YXq73abyMEePhpsf/projectcss
import sty from "./PlasmicVision.module.css"; // plasmic-import: opTqQ96dfN/css
import sailorSmokepngFUTrDxcai from "./images/sailorSmokepng.png"; // plasmic-import: fUTrDXCAI/picture
import orquepngZQdYgtB8 from "./images/orquepng.png"; // plasmic-import: zQDYgt_B8/picture

export const PlasmicVision__VariantProps = new Array();

export const PlasmicVision__ArgProps = new Array();

function PlasmicVision__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign({}, props.args);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsu0VQjvxy5SkDm()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
            light={true}
          />

          <div
            data-plasmic-name={"sliderSection"}
            data-plasmic-override={overrides.sliderSection}
            className={classNames(projectcss.all, sty.sliderSection)}
          >
            <div
              data-plasmic-name={"sliderContainer"}
              data-plasmic-override={overrides.sliderContainer}
              className={classNames(projectcss.all, sty.sliderContainer)}
            >
              <Slider
                data-plasmic-name={"slider"}
                data-plasmic-override={overrides.slider}
                arrows={false}
                className={classNames("__wab_instance", sty.slider)}
                dots={true}
              >
                {true ? (
                  <div
                    data-plasmic-name={"slide1"}
                    data-plasmic-override={overrides.slide1}
                    className={classNames(projectcss.all, sty.slide1)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__siHdt
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pSPjC
                          )}
                        >
                          {"Immersion in the Sailor's world"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ofbY6
                          )}
                        >
                          {
                            'Sailor invites whoever is ready to learn about the world, to dive into his creative universe and to share his vision. \n\nHe will offer to discover him under all these aspects with the operation "Hut", which will be a unique journey, mixing the real and the virtual.'
                          }
                        </div>
                      </p.Stack>
                    ) : null}
                  </div>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"slide2"}
                    data-plasmic-override={overrides.slide2}
                    className={classNames(projectcss.all, sty.slide2)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zaWqc
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5GZuq
                          )}
                        >
                          {"Empowering & mentoring artist"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__orlVw
                          )}
                        >
                          {
                            'Sailor invites whoever is ready to learn about the world, to dive into his creative universe and to share his vision. He will offer to discover him under all these aspects with the operation "Hut", which will be a unique journey, mixing the real and the virtual.'
                          }
                        </div>
                      </p.Stack>
                    ) : null}
                  </div>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"slide3"}
                    data-plasmic-override={overrides.slide3}
                    className={classNames(projectcss.all, sty.slide3)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cF00B
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7GjMw
                          )}
                        >
                          {"Imagine the tomorrow's Sailor"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gHvwk
                          )}
                        >
                          {
                            "Sailor wants to belong to the community, that's why he wanted to surrender himself \nin the web3. \n\nThe community will decide together via a DAO the future of Sailor's story."
                          }
                        </div>
                      </p.Stack>
                    ) : null}
                  </div>
                ) : null}
              </Slider>
            </div>

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__yePjf)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: sailorSmokepngFUTrDxcai,
                  fullWidth: 602,
                  fullHeight: 425,
                  aspectRatio: undefined
                }}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__bVvXz)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: orquepngZQdYgtB8,
                  fullWidth: 472,
                  fullHeight: 354,
                  aspectRatio: undefined
                }}
              />
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "sliderSection",
    "sliderContainer",
    "slider",
    "slide1",
    "slide2",
    "slide3"
  ],

  header: ["header"],
  sliderSection: [
    "sliderSection",
    "sliderContainer",
    "slider",
    "slide1",
    "slide2",
    "slide3"
  ],

  sliderContainer: ["sliderContainer", "slider", "slide1", "slide2", "slide3"],
  slider: ["slider", "slide1", "slide2", "slide3"],
  slide1: ["slide1"],
  slide2: ["slide2"],
  slide3: ["slide3"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicVision__ArgProps,
      internalVariantPropNames: PlasmicVision__VariantProps
    });

    return PlasmicVision__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVision";
  } else {
    func.displayName = `PlasmicVision.${nodeName}`;
  }
  return func;
}

export const PlasmicVision = Object.assign(
  // Top-level PlasmicVision renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sliderSection: makeNodeComponent("sliderSection"),
    sliderContainer: makeNodeComponent("sliderContainer"),
    slider: makeNodeComponent("slider"),
    slide1: makeNodeComponent("slide1"),
    slide2: makeNodeComponent("slide2"),
    slide3: makeNodeComponent("slide3"),
    // Metadata about props expected for PlasmicVision
    internalVariantProps: PlasmicVision__VariantProps,
    internalArgProps: PlasmicVision__ArgProps
  }
);

export default PlasmicVision;
/* prettier-ignore-end */
