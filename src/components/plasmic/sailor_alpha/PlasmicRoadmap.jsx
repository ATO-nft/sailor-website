// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6tP4H2YXq73abyMEePhpsf
// Component: c-0KVxh9hq
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import MyHeader from "../../MyHeader"; // plasmic-import: sfUx3YtoOJF/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_sailor_alpha.module.css"; // plasmic-import: 6tP4H2YXq73abyMEePhpsf/projectcss
import sty from "./PlasmicRoadmap.module.css"; // plasmic-import: c-0KVxh9hq/css

export const PlasmicRoadmap__VariantProps = new Array();

export const PlasmicRoadmap__ArgProps = new Array();

function PlasmicRoadmap__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <MyHeader
            data-plasmic-name={"myHeader"}
            data-plasmic-override={overrides.myHeader}
            className={classNames("__wab_instance", sty.myHeader)}
          />

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#FFFFFF" }}
                >
                  {"Hello roadmap"}
                </span>
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </h1>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "myHeader", "freeBox", "h1"],
  myHeader: ["myHeader"],
  freeBox: ["freeBox", "h1"],
  h1: ["h1"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRoadmap__ArgProps,
      internalVariantPropNames: PlasmicRoadmap__VariantProps
    });

    return PlasmicRoadmap__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRoadmap";
  } else {
    func.displayName = `PlasmicRoadmap.${nodeName}`;
  }
  return func;
}

export const PlasmicRoadmap = Object.assign(
  // Top-level PlasmicRoadmap renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    myHeader: makeNodeComponent("myHeader"),
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    // Metadata about props expected for PlasmicRoadmap
    internalVariantProps: PlasmicRoadmap__VariantProps,
    internalArgProps: PlasmicRoadmap__ArgProps
  }
);

export default PlasmicRoadmap;
/* prettier-ignore-end */
